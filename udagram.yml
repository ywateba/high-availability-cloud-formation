Parameters:
    VpcID: 
      Description: Please enter the ID for this VPC
      Type: String

    VpcCIDR:
      Description: Please enter the ID for this VPC
      Type: String
      
    PublicSubnets:
      Description: Please enter the network address for the public subnet in the second Availability Zone
      Type: String
      

    PrivateSubnets:
      Description: Please enter the network address for the private subnet in the first Availability Zone
      Type: String
      
    ImageId:
      Description: AMI identifier
      Type: String
      
    BastionCidrIp:
      Description: Address ip allowed to access with ssh
      Type: String
      
   

Resources:

    ######################## Security groups #################
    # BastionSecurityGroup:
    #   Type: AWS::EC2::SecurityGroup
    #   Properties:
    #     VpcId: !Ref VpcID
    #     GroupDescription: Security group for Bastion servers
    #     SecurityGroupIngress:
    #     - IpProtocol: tcp
    #       FromPort: 22
    #       ToPort: 22
    #       CidrIp: !Ref BastionCidrIp
    #     SecurityGroupEgress:
    #     - IpProtocol: tcp
    #       FromPort: 22
    #       ToPort: 22
    #       CidrIp: !Ref VpcCIDR

    WebServerSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        VpcId: !Ref VpcID
        GroupDescription: Security group for Application servers
        SecurityGroupIngress:
        - IpProtocol: tcp # to allow http from inside vpc
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref VpcCIDR
        - IpProtocol: ssh  # to allow ssh from inside the vpc
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref VpcCIDR
        SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0 # http response can go anywhere. they will be routed on nat gateway to access internet
        - IpProtocol: ssh
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref VpcCIDR

    ##############  S3 ###################################

    AppS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: yw-uda-bucket
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: error.html
        VersioningConfiguration:
          Status: Enabled
        OwnershipControls:
          Rules:
            - ObjectOwnership: ObjectWriter
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false


    AppS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref AppS3Bucket
        PolicyDocument:
          Statement:
            - Action:
                - s3:Get*
              Effect: "Allow"
              Resource: !Sub "arn:aws:s3:::${AppS3Bucket}/*"
              Principal: "*"


    ###############  IAM SETTINGS #######################

    WebServerInstanceRole:
      Type: AWS::IAM::Role
      DependsOn: AppS3Bucket
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'ec2.amazonaws.com'
            Action: 'sts:AssumeRole'

    AccessS3BucketPolicy:
      Type: AWS::IAM::Policy
      Properties:
        PolicyName: AccessS3BucketPolicy
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - s3:Get*
                - s3:List*
                - s3:PutObject
              Resource: !Sub "arn:aws:s3:::${AppS3Bucket}/*"
        Roles:
          - !Ref WebServerInstanceRole

    WebServerInstanceProfile:
      Type: AWS::IAM::InstanceProfile
      Properties:
        Path: '/'
        Roles:
        - !Ref WebServerInstanceRole

    ###################  LOAD BALANCERS ###############################
  
    WebAppTargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        HealthCheckIntervalSeconds: 10
        HealthCheckPath: /
        HealthCheckProtocol: HTTP
        HealthCheckTimeoutSeconds: 8
        HealthyThresholdCount: 2
        Port: 80
        Protocol: HTTP
        UnhealthyThresholdCount: 5
        VpcId: !Ref VpcID
       
    WebAppLoadBalancer:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties:
        Subnets:
          - !Select [0, !Split [",", !Ref PublicSubnets]]
          - !Select [1, !Split [",", !Ref PublicSubnets]]
        SecurityGroups:
          - !Ref WebServerSecurityGroup
        Scheme: internet-facing
        LoadBalancerAttributes:
          - Key: idle_timeout.timeout_seconds
            Value: "60"

    HttpListener:
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
        DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: WebAppTargetGroup
        LoadBalancerArn:
          Ref: WebAppLoadBalancer
        Port: '80'
        Protocol: HTTP

    # HttpsListener:
    #   Type: AWS::ElasticLoadBalancingV2::Listener
    #   Properties:
    #     DefaultActions:
    #     - Type: forward
    #       TargetGroupArn:
    #         Ref: WebAppTargetGroup
    #     LoadBalancerArn:
    #       Ref: WebAppLoadBalancer
    #     Port: '443'
    #     Protocol: HTTPS
    #     SslPolicy: ELBSecurityPolicy-2016-08  # Use an appropriate SSL policy
    #     Certificates:
    #       - CertificateArn: arn:aws:acm:us-east-1:123456789012:certificate/your-ssl-certificate

    # HttpToHttpsRule:
    #   Type: AWS::ElasticLoadBalancingV2::ListenerRule
    #   Properties:
    #     Actions:
    #       - Type: redirect
    #         RedirectConfig:
    #           Protocol: HTTPS
    #           Port: "443"
    #           StatusCode: HTTP_301
    #     Conditions:
    #       - Field: host-header
    #         HostHeaderConfig:
    #           Values:
    #             - "*"
    #     ListenerArn: !Ref HttpListener

    ListenerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
        - Type: forward
          TargetGroupArn: !Ref 'WebAppTargetGroup'
        Conditions:
        - Field: path-pattern
          Values: [/]
        ListenerArn: !Ref 'HttpListener'
        Priority: 1

    ############## EC2 SERVERS ##########################

    # WebServerKeyPair:
    #     Type: 'AWS::EC2::KeyPair'
    #     Properties:
    #       KeyName: WebServerKeyPair

    # BastionKeyPair:
    #     Type: 'AWS::EC2::KeyPair'
    #     Properties:
    #       KeyName: BastionKeyPair
          
    # BastionServer:
    #     Type: AWS::EC2::Instance
    #     Properties:
    #       ImageId: !Ref ImageId  
    #       InstanceType: t2.micro
    #       KeyName: !Ref BastionKeyPair
    #       SubnetId: !Select [0, !Split [",", !Ref PublicSubnets]]
    #       SecurityGroupIds:
    #       - !Ref BastionSecurityGroup
    


    WebAppLaunchTemplate:
      Type: AWS::EC2::LaunchTemplate
      Properties:
        LaunchTemplateName: "WebServerTemplate"
        LaunchTemplateData:
          UserData:
            Fn::Base64: |
              #!/bin/bash
              apt-get update -y
              sudo apt-get install nginx -y
              service nginx start

              cat > /var/www/html/index.html <<EOF
              <!DOCTYPE html>
              <html>
              <head>
                <title>Welcome to Udagram</title>
              </head>
              <body>
                <h1>it works! Udagram, Udacity</h1>
                
              </body>
              </html>
              EOF
          ImageId: !Ref ImageId
          SecurityGroupIds:
            - !Ref WebServerSecurityGroup
          InstanceType: t2.micro
          IamInstanceProfile:
            Name: !Ref WebServerInstanceProfile

    ServersAutoScalingGroup:
      Type: AWS::AutoScaling::AutoScalingGroup
      Properties:
        LaunchTemplate:
          LaunchTemplateId: !Ref WebAppLaunchTemplate
          Version: !GetAtt WebAppLaunchTemplate.LatestVersionNumber
        MinSize: 2
        MaxSize: 4
        DesiredCapacity: 2
        VPCZoneIdentifier:
          - !Select [0, !Split [",", !Ref PrivateSubnets]]
          - !Select [1, !Split [",", !Ref PrivateSubnets]]
        TargetGroupARNs:
          - !Ref WebAppTargetGroup


Outputs: 
    LoadBalancerDNS:
      Description: "The DNS name of the load balancer"
      Value: !Join ["", [http://,!GetAtt WebAppLoadBalancer.DNSName]]

    AppBucket:
      Description: "S3 Bucket for static content"
      Value: !Ref AppS3Bucket

    IAMRoleARN:
      Description: ARN of the IAM Role
      Value: !GetAtt WebServerInstanceRole.Arn
    
    # BastionPublicIP:
    #   Description: "Public IP address of the EC2 instance"
    #   Value: !GetAtt BastionServer.PublicIp
   
